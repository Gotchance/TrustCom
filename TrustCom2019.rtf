{\rtf1\ansi\deff11\deflang1024
{\fonttbl{\f3\fnil\fcharset0 Zapf Chancery;}
{\f4\fnil\fcharset204 Zapf Chancery;}
{\f5\fnil\fcharset204 Times New Roman;}
{\f6\fnil\fcharset204 Arial;}
{\f7\fnil\fcharset204 Arial;}
{\f8\fnil\fcharset204 Courier New;}
{\f9\fnil\fcharset2 Symbol;}
{\f10\fnil\fcharset0 MT Extra;}
{\f11\fnil\fcharset0 Times New Roman;}
{\f12\fnil\fcharset0 Book Antiqua;}
{\f13\fnil\fcharset0 Bookman Old Style;}
{\f14\fnil\fcharset0 Century Gothic;}
{\f15\fnil\fcharset0 New Century Schoolbook;}
{\f16\fnil\fcharset0 Arial;}
{\f17\fnil\fcharset0 Arial;}
{\f18\fnil\fcharset0 Courier New;}
{\f99\froman\fcharset128\fprq1{\*\panose 02020609040205080304}\'82\'6c\'82\'72 \'96\'be\'92\'a9{\*\falt MS Mincho};}}
{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
\red0\green0\blue128;
\red0\green128\blue128;
\red0\green128\blue0;
\red128\green0\blue128;
\red128\green0\blue0;
\red128\green128\blue0;
\red128\green128\blue128;
\red192\green192\blue192;
}
{\stylesheet
{\s0\fs20\snext0 Normal;}
{\s2\ql\sb240\sa60\keepn\f11\b\fs40 \sbasedon0\snext0 heading 1;}
{\s6\ql\sb240\sa60\keepn\f11\b\fs24 \sbasedon0\snext0 heading 5;}
{\s1\qc\sb240\sa60\keepn\f11\b\fs40 \sbasedon0\snext0 part;}
{\s3\ql\sb240\sa60\keepn\f11\b\fs32 \sbasedon0\snext0 heading 2;}
{\s7\ql\sb240\sa60\keepn\f11\b\fs24 \sbasedon0\snext0 heading 6;}
{\s4\ql\sb240\sa60\keepn\f11\b\fs32 \sbasedon0\snext0 heading 3;}
{\s5\ql\sb240\sa60\keepn\f11\b\fs24 \sbasedon0\snext0 heading 4;}
}
\paperw12280\paperh15900\margl2680\margr2700\margt2540\margb1760\pgnstart0\widowctrl\qj\ftnbj
{
\par\pard\qc {\fs30 \qc\fi300 Real-time Cyber attack Detection Method based on Darknet Traffic Analysis by Graphical Lasso }
\par\qc {\fs24  {Chansu Han{1}{2}, Jumpei Shimamura{3}, Takeshi Takahashi{1}, Daisuke Inoue{1}, Masanori Kawakita{2}, \par
\qc\fi0 Jun\rquote ichi Takeuchi{2}{1}, and Koji Nakao{1}} {{1}National Institute of Information and Communications Technology, Japan. \{han, takeshi_takahashi, dai, ko-nakao\}@nict.go.jp} {{2}Kyushu University, Japan. \{tak\}@inf.kyushu-u.ac.jp} {{3}clwit Inc., Japan. \{shimamura\}@clwit.co.jp} }
\par\qc {\fs24 }\par
{\qj\fi0 \qc{\b Abstract}\par
\qj\li1024\ri1024\fi300 Recently, as cyber attacks from malware are evolving more and more, serious security incidents occur frequently and making cyberspace less secure. Accordingly, studies on cyber attack detection methods that can cope with subspecies and unknown cyber attacks promptly and precisely are important. Our earlier method monitors network traffic arriving at a darknet, estimates cooperativeness of the source host pairs of this traffic, and detects outliers through anomaly cooperative traffic. One of the causes of anomaly source host-to-host cooperativeness on darknet traffic is a cyber attack using Internet-wide scanning. However, although the method is effective for cyber attack detection, it can not analyze in real-time. In this study, we propose an online processing algorithm, making it possible to detect cyber attacks in real-time. We also tune several important parameters, implement and operate the proposed method, and evaluate the performance of our method. As a result of evaluating cyber attack detection accuracy through a limited ground truth, we obtained results of 91.2% accuracy, 100% precision, 91.2% recall, 95.4% F-measure. \par
}{\qj\sb120 \fi0 \qc [Sorry. Ignored {\plain\f18\\begin\{IEEEkeywords\} ... \\end\{IEEEkeywords\}}]\par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f11\b\fs32 1  Introduction\par
}\qj\sb60 \fi0 Cyber attacks have continued to grow and become diverse recently, and the number of variants and unknown cyber attacks is increasing. In any cyber attack, it is important to quickly and precisely grasp actual behaviors of cyber attacks on the Internet as a countermeasure. As a conventional method for dealing with actual cyber attacks quickly and precisely by network-based access control and analysis, there are signature based and whitelist/blacklist based access control method like a intrusion detection system and a firewall. In general, however, these conventional methods cannot expect to cope with subspecies and unknown cyber attacks. Also, there is a heuristic rule-based analysis and response method by experts such as network security operators, but human error can occur. For the above reasons, studies on a cyber attack detection method that can quickly and precisely deal with subspecies and unknown cyber attacks and without human error are important in recent years.\par
\qj\fi300 We focus on the detection of indiscriminate attacks like Internet-wide scan such as attacking and intruding to an unspecified number of Internet users. Here, we set up receivers (sensors) in our darknet\emdash unused IP address blocks\emdash and captured all the traffic arriving at the sensors to generate a dataset. A lot of cyber attacks like indiscriminately scattered network scans reached the darknet. Therefore, by analyzing the darknet rather than using another network dataset, it was easy to grasp what kind of network service was being targeted and the trend of global cyber attack. However, since the darknet sensor we operate did not return a response, it was difficult for a human to manually distinguish whether the received packet was intended for cyber attack. Accordingly, in this study, we worked on a mechanism to mechanically detect indiscriminate cyber attacks reaching darknets like network scans. The mechanism detected cyber attacks quickly and precisely including subspecies and unknown cyber attacks by using an unsupervised machine learning method, so that there is no human error.\par
\qj\fi300 Since infected hosts (devices) forming a botnet behaved synchronously when they received commands from a command-and-control server\~
[{\field{\*\fldinst{\lang1024 REF BIB_Akiyama \\* MERGEFORMAT }}{\fldrslt{1}}}
], our earlier method\~
[{\field{\*\fldinst{\lang1024 REF BIB_Han \\* MERGEFORMAT }}{\fldrslt{8}}}
] focused on cooperativeness between the source hosts. Since this method used the library of R language \ldblquote glasso\rdblquote \~
[{\field{\*\fldinst{\lang1024 REF BIB_Friedman_glasso \\* MERGEFORMAT }}{\fldrslt{7}}}
], this method is called \ldblquote {\scaps0\b0\i GLASSO} engine\rdblquote  from the following for convenience. The {\scaps0\b0\i GLASSO} engine estimated the cooperativeness of all pairs of source hosts from the time pattern of the number of packets received from each source host in a certain time period in darknet traffic using the sparse structure learning algorithm \ldblquote Graphical Lasso\rdblquote \~
[{\field{\*\fldinst{\lang1024 REF BIB_Friedman \\* MERGEFORMAT }}{\fldrslt{6}}}, {\field{\*\fldinst{\lang1024 REF BIB_Ide \\* MERGEFORMAT }}{\fldrslt{11}}}
]. The degree of cooperativeness in that time period was quantified into a numerical value and a time period in which the numerical value was anomaly high compared with other time periods was detected as an outlier\~
[{\field{\*\fldinst{\lang1024 REF BIB_Han \\* MERGEFORMAT }}{\fldrslt{8}}}
]. It could be seen that a strongly cooperated campaign was performed from many source hosts in the time period judged as an outlier. One of the causes of anomaly source host-to-host cooperativeness on darknet traffic was a cyber attack using Internet-wide scanning, and the {\scaps0\b0\i GLASSO} engine could detect such cyber attacks. The cooperativeness of host pairs mentioned here meant that there was no cooperativeness with that host pair when the time pattern of the number of packets received from each source host was conditionally independent between two hosts. This cooperativeness could be estimated by the graphical lasso algorithm. In addition, the graphical lasso could be expected to scrape off weak cooperativeness of host pair that depend on coincidence. Therefore, this engine would not need to consider the communication due to misconfigurations arriving at the darknet and the weak cooperativeness of the host pair, and it could be expected to estimate more essential cooperativeness.\par
{\b \qj\fi0 Contribution.}Since the {\scaps0\b0\i GLASSO} engine in the earlier work\~
[{\field{\*\fldinst{\lang1024 REF BIB_Han \\* MERGEFORMAT }}{\fldrslt{8}}}
] was in a batch mode requiring 3 days\rquote  darknet traffic data to process; when considering the processing time, the result was delayed by more than 3 days until output. In other words, it could not be said that the batch-mode {\scaps0\b0\i GLASSO} engine could analyze darknet traffic promptly. Therefore, in this paper, we proposed an online processing algorithm of {\scaps0\b0\i GLASSO} engine and made outlier detection sequentially and in real-time. Also, we selected and evaluated important parameters in the {\scaps0\b0\i GLASSO} engine. Next, in order to shorten processing time and to be able to process more scalable, we devised at the stage of preprocessing. Then, the {\scaps0\b0\i GLASSO} engine was operated in real-time using live darknet traffic (raw packets) without delay, and the detection result was evaluated by destination TCP ports (by services). In general, it was difficult to distinguish whether a packet arriving at the darknet was intended for a cyber attack. Therefore, it was difficult to give out the ground truth of cyber attacks in the darknet, but for the evaluation, we made a correct answer table in the range we understood and evaluated detection result using limited ground truth. As a result, it was found that the number of true positive TCP ports was 31, the number of false negative TCP ports was 3, and the number of false positive TCP ports was 0, and it was found that the {\scaps0\b0\i GLASSO} engine detected the following network scan in the darknet: A network scan that distributed scanning from infected botnet hosts like Mirai, Hajime, etc. or self-propagating worm-type malware searching for the next infected target. To sum up, the proposed {\scaps0\b0\i GLASSO} engine was possible to quickly and precisely grasp indiscriminate cyber attacks like network scans in real-time, automatically, and we thought it would lead to ease a burden of network operation.\par
\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f11\b\fs32 2  Background\par
}\qj\sb60 \fi0 In this section, the overview of our fundamental tools, i.e., a darknet, graphical Gaussian model, and graphical lasso algorithm, are presented.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f11\b\fs32 2.1  Darknet\par
}\qj\sb60 \fi0 The Internet can be categorized into two types of networks: livenet and darknet. A livenet is a network of a busy IP addresses, while a darknet is a network of unused IP addresses. We set up receivers (sensors) on our darknets and passively capture all the traffic arriving at these receivers. Most of the packets in the traffic are TCP packets with SYN flag on, i.e., TCP-SYN packets. TCP-SYN packets reaching a darknet are non-ordinary packets; these are often scans, backscatters caused by IP spoofing, or inintended packets sent by misconfigured network devices. The scans may be initiated by malware for indiscriminately locating the next victim candidates or by any other entities for investigating and researching the Internet. In this paper, a network scan that indiscriminately tried attacks and intrusions through vulnerable TCP ports is called a cyber attack, and a network scan that indiscriminately tried surveys and researches by organizations like Shodan and Censys is called a survey scan.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f11\b\fs32 2.2  Graphical Gaussian Model\par
}\qj\sb60 \fi0 A graphical Gaussian model (hereinafter, GGM) is a probabilistic model for which a graph expresses the dependence structure between random variables given a multivariate Gaussian distribution. As a method of measuring the dependency structure between random variables, obtaining correlation coefficients is one method, but there is a problem that spurious correlation between random variables is included. As a method of measuring the dependency structure which does not include the spurious correlation between random variables, there is a method of obtaining a precision matrix {{\field{\*\fldinst{ EQ {\f9 S}\\s\\up5({\fs16 -1})}}{\fldrslt }}} from which conditional independence of a pair of random variables can be measured. If and only if when {{\field{\*\fldinst{ EQ {\f9 S}\\s\\up({\fs16 -1,{\i i}{\i j}})=0}}{\fldrslt }}}, then {{\field{\*\fldinst{ EQ {\i x}\\s\\do5({\fs16 {\i i}})}}{\fldrslt }}} and {{\field{\*\fldinst{ EQ {\i x}\\s\\do5({\fs16 {\i j}})}}{\fldrslt }}} are independent conditioned on all the other variables. The definition of the graph in the GGM using the precision matrix {{\field{\*\fldinst{ EQ {\f9 S}\\s\\up5({\fs16 -1}){\f9\'ce}{{\i R}}\\s\\up5({\fs16 {\i N}{\f9\'b4}{\i N}})}}{\fldrslt }}} of a sequence of random variables following an {{\i N}}-dimensional multivariate Gaussian distribution is as follows: {{\i N}} random variables correspond to the nodes, and if a matrix element of {{\field{\*\fldinst{ EQ {\f9 S}\\s\\up5({\fs16 -1})}}{\fldrslt }}} is zero, there is no edge between the nodes, if a matrix element is non-zero, there is edge between the nodes\~
[{\field{\*\fldinst{\lang1024 REF BIB_Ide \\* MERGEFORMAT }}{\fldrslt{11}}}
]. In other words, the graph in GGM using this precision matrix show conditional independence of all pairs of random variables.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f11\b\fs32 2.3  Graphical Lasso\par
}\qj\sb60 \fi0 The precision matrix {{\field{\*\fldinst{ EQ {\f9 S}\\s\\up5({\fs16 -1})}}{\fldrslt }}} is the inverse matrix of the sample covariance matrix {{\i S}}. We expect the precision matrix {{\field{\*\fldinst{ EQ {\f9 S}\\s\\up5({\fs16 -1})}}{\fldrslt }}} to be a sparse matrix such that variable pairs with essential dependencies take nonzero values and perhaps weakly related variable pairs with noise take zero. In general, however, the elements of the sample covariance matrix {{\i S}} cannot be strictly zero, and the precision matrix {{\field{\*\fldinst{ EQ {\f9 S}\\s\\up5({\fs16 -1})}}{\fldrslt }}} is also not generally sparse. Therefore, the \ldblquote graphical lasso\rdblquote  which is a sparse structure learning algorithm optimizes a precision matrix by solving a maximum likelihood equation with {{\field{\*\fldinst{ EQ {\f10\'6c}\\s\\do5({\fs16 1})}}{\fldrslt }}} regularization term in one column (one row) and estimates a sparse precision matrix {{\field{\*\fldinst{ EQ \\O({\f9 S}\\s\\up5({\fs16 -1}),\\S({\f10\'24}))}}{\fldrslt }}} without explicit inverse matrix calculation\~
[{\field{\*\fldinst{\lang1024 REF BIB_Friedman \\* MERGEFORMAT }}{\fldrslt{6}}}
]. The input arguments of the graphical lasso algorithm are the sample covariance matrix {{\i S}} and the {{\field{\*\fldinst{ EQ {\f10\'6c}\\s\\do5({\fs16 1})}}{\fldrslt }}} regularization coefficient {{\i r}{\f9\'ce}{{\i R}}{\fs15  }({\f9\'b3}0)}. Here, {{\i r}} is a threshold to decide how much dependency is regarded as noise-derived, and it is possible to adjust the sparsity of the precision matrix to be estimated. From the above, the GGM graph using the precision matrix {{\field{\*\fldinst{ EQ \\O({\f9 S}\\s\\up5({\fs16 -1}),\\S({\f10\'24}))}}{\fldrslt }}} estimated by the graphical lasso algorithm express conditionally independent and more essential dependencies of all variable pairs.\par
\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f11\b\fs32 3  Related Work\par
}\qj\sb60 \fi0 Many studies using darknet had been carried out, and showed its usefulness on analyzing Internet-wide scanning. Dainotti {\scaps0\b0\i et al.} developed and evaluated a methodology for removing spoofed traffic from both darknets and live networks, and contributed to support census-like analyses of IP address space utilization\~
[{\field{\*\fldinst{\lang1024 REF BIB_Dainotti \\* MERGEFORMAT }}{\fldrslt{3}}}
]. Durumeric {\scaps0\b0\i et al.} analyzed a large-scale darknet to investigate scanning activities, and identified patterns in large horizontal scanning operations\~
[{\field{\*\fldinst{\lang1024 REF BIB_Durumeric \\* MERGEFORMAT }}{\fldrslt{4}}}
]. Also, they presented an analysis of the latest network scanning on the overall landscape, and its influence, and countermeasures of the defender in detail. Fachkha {\scaps0\b0\i et al.} devised inference and characterization modules for extracting and analyzing cyber-physical systems (CPS) probing activities toward ample CPS protocols by correlating and analyzed various dimensions of a large amount of darknet data\~
[{\field{\*\fldinst{\lang1024 REF BIB_Fachkha \\* MERGEFORMAT }}{\fldrslt{5}}}
].\par
\qj\fi300 The {\scaps0\b0\i GLASSO} engine was an engine that detects cyber attacks by capturing the cooperativeness between source hosts reaching the darknet. Most similar to our work was a study by Ban {\scaps0\b0\i et al.}\~
[{\field{\*\fldinst{\lang1024 REF BIB_Ban \\* MERGEFORMAT }}{\fldrslt{2}}}
], who proposed an abrupt-change detection algorithm that detected botnet-probe campaigns with a high detection rate by exploring the temporal coincidence in botnet activities visible in darknet traffic. However, the dataset used in this abrupt-change detection algorithm processed traffic with only one destination TCP port, and it was not a real-time detection system. Since the {\scaps0\b0\i GLASSO} engine processed the entire live traffic without restriction, the range of the dataset was different from the abrupt-change detection algorithm. Actually, research using a darknet to detect cyber attacks of similar scale in the same dataset range as the {\scaps0\b0\i GLASSO} engine did not exist as far as we know and it was difficult to compare and evaluate.\par
\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f11\b\fs32 4  {\scaps0\b0\i GLASSO} Engine (Batch-mode)\par
}\qj\sb60 \fi0 In this section, we described how the earlier work\~
[{\field{\*\fldinst{\lang1024 REF BIB_Han \\* MERGEFORMAT }}{\fldrslt{8}}}
] applied GGM to darknet traffic data and introduced the algorithm and its defects of the batch mode {\scaps0\b0\i GLASSO} engine at the time.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f11\b\fs32 4.1  Applying GGM to Darknet Traffic\par
}\qj\sb60 \fi0 The {\scaps0\b0\i GLASSO} engine took a time pattern of the number of packets received from each source host as a variable and applied GGM to capture the dependency between variables (source hosts). Although this variable was never expressed as a Gaussian distribution, it could be assumed that there were many variables close to the form of a log-normal distribution, so it approximated to some extent a Gaussian distribution by log-transformation. Also, if the variables could not be completely complied with a Gaussian distribution but could be approximated to some extent, dependency relationships between the variables in the GGM could be grasped.\par
\qj\fi300 First, we considered how to process the dataset for darknet traffic. Darknet traffic for {{\i T}} seconds used for one model learning was called a time slot. We suppose there were {{\i N}} unique source hosts in a time slot {{\i t}}. A time series data was generated by counting the number of packets observed at a certain sampling interval for every source hosts. Here, if the number of time series samples was {{\i M}}, the sampling interval was {{\i T}/{\i M}({\i s}{\i e}{\i c}.)}. Then, we converted from a time slot {{\i t}} to data matrix D. {\par\par
\pard\tqc\tx3450\tab {\field{\*\fldinst{ EQ {{\i D}}\\s\\do5({\fs16 {\i t}})=[{\i D}\\s\\do5({\fs16 {\i m}{\i n}})]{\f9\'ce}{{\i R}}\\s\\up5({\fs16 {\i M}{\f9\'b4}{\i N}})\\,{\fs15  }{\fs15  }{\i D}\\s\\do5({\fs16 {\i m}{\i n}}):={\plain log}\\({\i x}\\s\\up({\fs16 \\({\i m}\\),{\i n}})\\)\\,{\fs15  }{\fs15  }{{\i x}}\\s\\up5({\fs16 \\({\i m}\\)}){\f9\'ce}{{\i N}}\\s\\up({\fs16 {\i N},0}).}}{\fldrslt }}\par
}\qj\fi0 Here, {{\field{\*\fldinst{ EQ {{\i x}}\\s\\up5({\fs16 \\({\i m}\\)})}}{\fldrslt }}} meant {{\i N}}-dimensional variables of the number of samples of {{\i M}}, and {{\field{\*\fldinst{ EQ {\i x}\\s\\up({\fs16 \\({\i m}\\),{\i n}})}}{\fldrslt }}} represented the number of packets at the {{\i m}}-th point of the {{\i n}}-th source host. Since log-transformation could not be performed when {{\field{\*\fldinst{ EQ {\i x}\\s\\up({\fs16 \\({\i m}\\),{\i n}})=0}}{\fldrslt }}}, it was converted to an appropriate value {{\field{\*\fldinst{ EQ {\i x}\\s\\up({\fs16 \\({\i m}\\),{\i n}})=0.1}}{\fldrslt }}}. Also, {{\field{\*\fldinst{ EQ {{\i N}}\\s\\do5({\fs16 0})=\{0\\,1\\,2\\,{\f9\'d7\'d7\'d7}\}}}{\fldrslt }}}.\par
\qj\fi300 Next, we obtain a precision matrix from the data matrix {{\field{\*\fldinst{ EQ {{\i D}}\\s\\do5({\fs16 {\i t}})}}{\fldrslt }}} using the graphical lasso algorithm and apply GGM. Then, a set of source host (variable) corresponds to a node set of a graph in the GGM, and a presence or absence of a dependence relationship of a source host pair (variable pair) corresponds to an edge set. The cooperativeness of host pairs meant that there was no cooperativeness with that host pair when the time pattern of the number of packets received from each source host was conditionally independent between two hosts.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f11\b\fs32 4.2  Algorithm of Batch-mode {\scaps0\b0\i GLASSO} Engine\par
}\qj\sb60 \fi0 We prepared darknet traffic observed over a long period of time (e.g. 3 days traffic) and divided traffic every {{\i T}} seconds to create multiple time slots. At that time, we consider only SYN packets, TCP. Next, a data matrix {{\field{\*\fldinst{ EQ {{\i D}}{\f9\'ce}{{\i R}}\\s\\up5({\fs16 {\i M}{\f9\'b4}{\i N}})}}{\fldrslt }}} was created for each time slot, and a sample covariance matrix {{\field{\*\fldinst{ EQ {\i S}{\f9\'ce}{{\i R}}\\s\\up5({\fs16 {\i N}{\f9\'b4}{\i N}})}}{\fldrslt }}} was obtained. The sample covariance matrix {{\i S}} and a positive real number {{\i r}} were input to the graphical lasso algorithm to obtain a sparsely estimated precision matrix {{\field{\*\fldinst{ EQ {\\(\\O({\f9 S}\\s\\up5({\fs16 -1}),\\S({\f10\'24}))\\)}\\s\\up5({\fs16 \\({\i r}\\)}){\f9\'ce}{{\i R}}\\s\\up5({\fs16 {\i N}{\f9\'b4}{\i N}})}}{\fldrslt }}}. Here, we tried with some positive real numbers like {{\field{\*\fldinst{ EQ {\i r}{\f9\'ce}{\i R}\\(=\{{\i r}\\s\\do5({\fs16 1})\\,{\i r}\\s\\do5({\fs16 2})\\,{\f9\'d7\'d7\'d7}\\,{\i r}\\s\\do5({\fs16 {\i s}})\}{\f9\'ce}{{\i R}}\\s\\up5({\fs16 {\i s}}){\fs15  }\\({\f9\'b3}0\\)\\)}}{\fldrslt }}}. From the estimated precision matrix, an undirected graph {{\i G}=\{{\i V},{\i E}\}} in GGM could be represented by node set {{\field{\*\fldinst{ EQ {\i V}=\{{\i x}\\s\\do5({\fs16 1})\\,{\f9\'d7\'d7\'d7}\\,{\i x}\\s\\do5({\fs16 {\i N}})\}}}{\fldrslt }}} and edge set {{\field{\*\fldinst{ EQ {\i E}=\{\\({\i i}\\,{\i j}\\)|{\f9 S}\\s\\up({\fs16 -1,{\i i}{\i j}}){\f9\'b9}0\}}}{\fldrslt }}}. Then, in order to express the degree of cooperativeness between all pairs of source host in each time slot with scalar values, we obtained a graph density value {{\field{\*\fldinst{ EQ {\i d}\\s\\up5({\fs16 \\({\i r}\\)})=|{\i E}|/{\i N}\\({\i N}-1\\)}}{\fldrslt }}} for each time slot. The graph density value represented the ratio of the actual number of edges to the number of edges of the complete graph. Finally, time slots corresponding to graph densities showing anomaly high values compared to all graph density values were determined using outlier detection techniques.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f11\b\fs32 4.3  Defects of Batch-mode {\scaps0\b0\i GLASSO} Engine\par
}\qj\sb60 \fi0 The batch mode {\scaps0\b0\i GLASSO} engine could detect anomalies of cooperativeness between source hosts and showed its usefulness, but it was necessary to prepare 3 days\rquote  darknet traffic data and processed at once. In other words, considering until the processing time, it would be delayed by 3 days or more until the result output, and the expected effect leading to prompt response would be low. Also, although there were multiple parameters in the {\scaps0\b0\i GLASSO} engine, it had not been evaluated on what basis the parameters were set. Finally, only a few results of outlier detection was mentioned as case studies and there was no evaluation using a ground truth; the verification of the method was insufficient. Therefore, in the rest of this paper, we would improve the defects mentioned above.\par
\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f11\b\fs32 5  {\scaps0\b0\i GLASSO} Engine (Online-mode)\par
}\qj\sb60 \fi0 In this section, we introduce a newly proposed {\scaps0\b0\i GLASSO} engine for real-time analysis: Online processing algorithm and alert judgment method. The input of the {\scaps0\b0\i GLASSO} engine is packet capture (PCAP) file of darknet traffic for T seconds and other parameters {{\field{\*\fldinst{ EQ {\i M}\\,{\i r}{\f9\'ce}{\i R}\\(=\{{\i r}\\s\\do5({\fs16 1})\\,{\i r}\\s\\do5({\fs16 2})\\,{\f9\'d7\'d7\'d7}\\,{\i r}\\s\\do5({\fs16 {\i s}})\}\\)\\,{{\i d}}\\s\\up5({\fs16 \\({\i r}\\)})\\,{\i K}\\,{\f9 q}}}{\fldrslt }}}, and the output is alert information generated from time slots judged to be outliers. This alert information include information such as time stamp, a destination TCP port being targeted, source host IPs that sent the packet at its destination TCP port, and its amount. The targeted TCP port refers to the TCP port with the largest number of source hosts that sent packets to a destination TCP port in that time slot.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f11\b\fs32 {\*\bkmkstart BMalg1}5.1{\*\bkmkend BMalg1}  Algorithm for Online Processing\par
}\qj\sb60 \fi0 We considered a method of processing alerts (outliers) sequentially by processing every time slot, instead of processing multiple time slots at once. First, the newest time slot {{\i t}} was processed in the same manner as Section IV-B to obtain a graph density value {{\field{\*\fldinst{ EQ {\i d}\\s\\up({\fs16 \\({\i r}\\),{\i t}})}}{\fldrslt }}}. Then, {{\field{\*\fldinst{ EQ {\i d}\\s\\up({\fs16 \\({\i r}\\),{\i t}})}}{\fldrslt }}} was added to a sequence of the past graph density value {{\field{\*\fldinst{ EQ {{\i d}}\\s\\up5({\fs16 \\({\i r}\\)})}}{\fldrslt }}}, and if the length of {{\field{\*\fldinst{ EQ {{\i d}}\\s\\up5({\fs16 \\({\i r}\\)})}}{\fldrslt }}} was positive integer {{\i K}}, alert judgment (outlier detection) was performed. If the length of {{\field{\*\fldinst{ EQ {{\i d}}\\s\\up5({\fs16 \\({\i r}\\)})}}{\fldrslt }}} was less than {{\i K}}, wait until the next time slot updated without performing the alert judgment. Detailed alert judgment method was explained in a next section. The time slot judged as an alert was output as an alert and was deleted from {{{\i d}}} so that it would not be referred to in subsequent alert judgment. Also, if no time slot was determined as an alert, deleted the oldest time slot from {{{\i d}}}. When the time passes and a new time slot was updated, by repeating the above steps, it was possible to sequentially process {\scaps0\b0\i GLASSO} engine while keeping the number of time slots used for alert judgment. As a result, it obtained the result in real-time with a very short time compared to the batch-mode since only an updated time slot was processed. The pseudo code for {\scaps0\b0\i GLASSO} engine with online processing was described in the Algorithm\~{\field{\*\fldinst{\lang1024 REF BMalg1 \\* MERGEFORMAT }}{\fldrslt{1}}}. Here, {{\i l}{\i e}{\i n}{\i g}{\i t}{\i h}()} function got the length of vectors.\par
{\qj\fi0 \qc [Sorry. Ignored {\plain\f18\\begin\{algorithm\} ... \\end\{algorithm\}}]\par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f11\b\fs32 {\*\bkmkstart BMalg2}5.2{\*\bkmkend BMalg2}  Alert Judgment Method for Online Processing\par
}\qj\sb60 \fi0 In this section, we proposed an outlier detection method for discriminating alerts (outliers) from a sequence of graph density values {{{\i d}}} during online processing. It was checked how much the largest element occupies a whole sample variance in the sequence of graph density values {{{\i d}}}, and when a ratio was large, the largest element was judged to be an outlier. The pseudo code of the alert judgment method was indicated in the Algorithm\~{\field{\*\fldinst{\lang1024 REF BMalg2 \\* MERGEFORMAT }}{\fldrslt{2}}}. Here, {{\field{\*\fldinst{ EQ {\f9 s}\\s\\up({\fs16 2,\\({\i i}+1\\)})/{\f9 s}\\s\\up({\fs16 2,\\({\i i}\\)})<{\f9 q}}}{\fldrslt }}} was an outlier judgment formula, and {{\f9 q}{\fs6  }(0{\f9\'a3}{\f9 q}{\f9\'a3}1)} was a threshold value of an outlier judgment formula. Also, {{\i o}{\i r}{\i 